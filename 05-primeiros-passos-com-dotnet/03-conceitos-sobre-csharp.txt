C# : o que é ?
C# é uma linguagem elegante, orientada a objetos e fortemente tipada.
A sintaxe do C# é similar a do C, C++ e Java.
Suporta os conceitos de encapsulamento, herança e polimorfismo, por exemplo.
Os programas C# são executados no .Net, que inclui :
- CLR (Common Language Runtime)
- Conjunto unificado de bibliotecas de classes
Atualmente, o compilador do C# é o Roslyn.

C# : Como funciona ?
O código-fonte escrito em C# é compilado em uma linguagem intermediária (IL).
O código e os recursos de IL são armazenados no disco em um arquivo executável chamado assembly, geralmente com uma extensão .exe ou .dll.
Quando o programa C# é executado, o assembly é carregado na CLR, just in time.
Em seguida o CLR executará a compilação just in time (JIT) para converter o código IL em instruções de máquinas nativas.

O CLR também fornece outros serviços :
- Garbage Collector - verifica objetos em memória não utilizadas e as desalocam.
- Exception Handler - recebe e controla as exceções no programa.
- Resources Manager.

Além dos serviços de tempo de execução, o .Net também inclui uma extensa biblioteca com milhares de classes que fornecem uma ampla variedade de funcionalidades úteis, 
desde entrada e saída de arquivos, manipulação de cadeias de caracteres, análise XML, etc.

C# : Estrutura de programa
Os principais conceitos organizacionais em C# são :
- programas;
- namespaces;
- tipos;
- membros;
- assemblies.

Programas c# consistem em um ou mais arquivos.
Os programas declaram tipos, que contêm membros e podem ser organizados em namespaces.
Classes e interfaces são exemplos de tipos.
Campo, métodos, propriedades e eventos são exemplos de membros.
Quando os programas C# são compilados, eles são fisicamente empacotados em assemblies.
Os assemblies geralmente têm a extensão de arquivo .exe ou .dll, dependendo se são aplicações ou bibliotecas.

Tipos de valor
Variáveis de tipos de valor contêm diretamente seus dados.
As variáveis têm sua própris cópia dos dados e não é possível que as operações afetem outra variável.
(exceto no caso das variáveis de parâmetro ref e out)

Numéricos : sbyte, short, int, long, byte, ushort, uint, ulong.
Caracteres unicode : char.
Pontos flutuantes : float, double, decimal.
Booleano: bool.
Outros tipos : enum, struct e nullable.

Variáveis de tipos de referência armazenam referências a seus dados.
É possível que eu tenha duas variáveis referenciando o mesmo objeto.

Tipos de Classes : class, objetc, string.Tipos de Arrays : int[], int[,], etc.
interface, delegate.

Instruções
Ações de um programa são expressas usando instruções.
{
	Um bloco permite que várias instruções sejam escritas em contextos.
}

Instruções de declaração :
- Declarações de variáveis e constantes locais.
Instruções de condicional :
- if;
- switch.
Instruções de repetição:
- while;
- do;
- for;
- foreach.
Instruções auxiliares :
- break;
- continue;
- return.
instruções para tratativa de exceções :
- throw;
- try catch.. finally;
- using.

Arrays
Um array é uma estrutura de dados que contém um número "x" de elementos, todos do mesmo tipo.
São acessados através de índices computados.
Arrays são tipos de referência e a declaração de uma variável.
Array, simplesmente, reserva espaço para uma referência de uma instância de array.

Ao criar um array, é especificado o tamanho da nova instância, que é fixo durante todo o tempo de vida da instância.
os índices dos elementos de um array variam de 0 ao comprimento do array -1.
int[] a = [0,1,2,3,...];

...
